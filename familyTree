package ru.gb.writer.family_tree;

import ru.gb.writer.human.Human;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class FamilyTree implements Serializable, Iterable<Human> {
    private long countPeople;
    private final List<Human> humanList;

    public FamilyTree(List<Human> humanList){ this.humanList = humanList;}

    public FamilyTree() {this(new ArrayList<>()); }

    public boolean add(Human human){
        if (human == null){
            return false;
        }
        if (!humanList.contains(human)){
            humanList.add(human);
            human.setId(countPeople++);

            addToParents(human);
            addToChildren(human);

            return true;
        }
        return false;
    }

    private void addToParents(Human human){
        for (Human parent: human.getParents()){
            parent.addChild(human);
        }
    }

    private void addToChildren(Human human){
        for (Human child: human.getChildren()){
            child.addParent(human);
        }
    }

    public List<Human> getSiblings(int id) {
        Human human = getById(id);
        if (human == null) {
            return null;
        }
        List<Human> res = new ArrayList<>();
        for (Human parent : human.getParents()) {
            for (Human child : parent.getChildren()) {
                if (!child.equals(human)) {
                    res.add(child);
                }
            }
        }
        return res;
    }

    public List<Human> getBeName(String name){
        List<Human> res = new ArrayList<>();
        for (Human human: humanList){
            if (human.getName().equals(name)){
                res.add(human);
            }
        }
        return res;
    }

    //TODO написать метод созд.родств.св

    public boolean setWedding(long humanId1, long humanId2){
        if (checkId(humanId1) && check(humanId2)) {
            Human human1 = getById(humanId1);
            Human human2 = getById(humanId2);
            return setWedding(human1, human2);
        }
        return false;
    }

    public boolean setWedding(Human human1, Human human2){
        if (human1.getSpouse() == null && human2.getSpouse() == null){
            human1.setSpouse(human2);
            human2.setSpouse(human1);
            return true;
        } else {
            return false;
        }
    }

    public boolean setDivorce(long humanId1, long humanId2) {
        if (checkId(humanId1 && checkId(humanId2))) {
            Human human1 = getbyId(humanId1);
            Human human2 = getById(humanId2);
            return setDivorce(human1, human2);
        }
        return false
    }

    public boolean setDivorce(Human human1, Human human2){
        if (human1.getSpouse() != null && human2.getSpouse() != null){
            human1.getSpouse(null);
            human2.getSpouse(null);
            return true;
        } else {
            return false;
        }

    }

    private boolean checkId(long id){
        return id < countPeople && id >= 0;
    }

    public Human getById(long id){
        if (checkId(id)){
            for (Human human: humanList){
                if (human.getId() == id){
                    return human;
                }
            }
        }
        return null;
    }

    @Override
    public String toString() { return getInfo(); }

    public String getInfo(){
        StringBuilder sb = new StringBuilder();
        sb.append("в дереве");
        sb.append(humanList.size());
        sb.append(" обьектов: \n");
        for (Human human: humanList){
            sb.append(human);
            sb.append("\n");
        }
        return sb.toString();
    }

    public void sortByName() { humanList.sort(new HumanComparatorByName()); }

    public void sortByDeathDate() { humanList.sort(new HumanComparatorByBirthDate()); }

    @Override
    public Iterator<Human> iterator() { return new FamilyTreeIterator(humanList); }


}
